@page "/Artists"

@using System.Linq;

@inject IJSRuntime jsRuntime
@inject Repositories.ArtistRepository ArtistRepository
@inject Repositories.FilmRepository FilmRepository
@inject DialogService dialogService
@inject NotificationService notificationService

<div class="container-fluid m-0 p-0">
    <div class="row">
        <div class="col">
            <h1 class="d-inline">Artists</h1>
        </div>
        <div class="col">
            <RadzenButton Style="float:right" Icon="add" ButtonStyle="ButtonStyle.Primary" Click="((args) => OpenAddArtistDialog())"></RadzenButton>
        </div>
    </div>
</div>

@if (Artists == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenGrid Style="margin-top:20px" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="6"
                AllowSorting="true" Data="@Artists" TItem="Models.Artist" ColumnWidth="200px" RowDoubleClick="(async (args) => { this._foundArtistId = args.ArtistId; await FindById(); })">
        <Columns>
            <RadzenGridColumn Width="20px" TItem="Models.Artist" Property="ArtistId" Title="ID" />
            <RadzenGridColumn Width="100px" TItem="Models.Artist" Property="ArtistName" Title="Name" />
            <RadzenGridColumn Width="20px" TItem="Models.Artist" Property="Age" Title="Age" />
            <RadzenGridColumn Width="200px" TItem="Models.Artist" Property="ArtistFilms" Title="Films" Sortable="false" Filterable="false">
                <Template Context="data">
                    <p>@string.Join(" - ", data.ArtistFilms)</p>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn Width="20px" TItem="Models.Artist" Property="ArtistId" Sortable="false" Filterable="false">
                <Template Context="data">
                    <RadzenButton Icon="remove" Click="@((args) => RemoveArtist(data.ArtistId))"></RadzenButton>
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>

    <div class="row">
        <div class="col-md-6">
            <div class="row">
                <div class="align-items-center d-flex col-md-4">
                    <RadzenLabel Text="Find Artist By Id" />
                </div>
                <div class="col-md-6">
                    <RadzenNumeric Style="margin-bottom: 20px; margin-top: 20px" @bind-Value="@_foundArtistId" Min="1000" Max="9999" />
                    <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Light" Click="((args) => FindById())"></RadzenButton>
                </div>
            </div>
        </div>
    </div>
}

@code {
    #region Fields

    protected List<Models.Artist> Artists => this.ArtistRepository.GetAll().Select(x => x.Artist).ToList();

    private IEnumerable<Models.Film> _films => this.FilmRepository.GetAll().Select(x => x.Film).ToList();

    private int _newArtistId { get; set; } = 1000;
    private string _newArtistName { get; set; } = "";
    private int _newArtistAge { get; set; } = 1;
    private IEnumerable<string> _newArtistFilms { get; set; } = new List<string>();

    private int _foundArtistId { get; set; } = 1000;
    private Models.Artist _updateArtistModel { get; set; } = null;

    #endregion

    protected override void OnInitialized()
    {
    }

    private async Task OpenAddArtistDialog() => await dialogService.OpenAsync("Add Artist", ds =>
    @<RadzenCard Style="padding: 20px;">
         <div class="container">

             <div class="row mb-4 justify-content-start">
                 <div class="col">
                     <label class="">Id:</label>
                     <RadzenNumeric Min="1000" Max="9999" @bind-Value="_newArtistId"></RadzenNumeric>
                 </div>
                 <div class="col mx-2">
                     <label class="">Name:</label>
                     <RadzenTextBox Placeholder="Name" @bind-Value="_newArtistName"></RadzenTextBox>
                 </div>
                 <div class="col">
                     <label class="">Age:</label>
                     <RadzenNumeric Min="1" Max="999" @bind-Value="_newArtistAge"></RadzenNumeric>
                 </div>
             </div>
             <div class="row mb-4">
                 <div class="col">
                     <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value="_newArtistFilms" Multiple="true" Data="@_films"
                                    TextProperty="FilmName" ValueProperty="FilmName"
                                    Style="height:200px; width:100%" />
                 </div>
             </div>
             <div class="row">
                 <div class="col-md-12">
                     <RadzenButton Text="Discard" Click="() => ds.Close(false)" Style="margin-bottom: 10px; width: 150px" />
                     <RadzenButton Text="Add" Click="(() => { AddArtist(); ds.Close(true); })"
                                   ButtonStyle="ButtonStyle.Secondary"
                                   Style="margin-bottom: 10px; width: 150px" />
                 </div>
             </div>
         </div>
    </RadzenCard>
    );
    
    private void AddArtist()
    {
        try
        {
            var newArtist = new Models.Artist(_newArtistId, _newArtistName, _newArtistAge, _newArtistFilms.ToList());
            this.ArtistRepository.Add(newArtist);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
            this.notificationService.Notify(
                new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Adding Failed",
                    Detail = e.Message,
                    Duration = 4000
                });
        }
    }

    private async Task FindById()
    {
        try
        {
            _updateArtistModel = ArtistRepository.FindById(_foundArtistId);
        }
        catch (Exception e)
        {
            this.notificationService.Notify(
                new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Finding Failed",
                    Detail = e.Message,
                    Duration = 4000
                });
        }

        if (_updateArtistModel == null)
        {
            this.notificationService.Notify(
                new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Finding Failed",
                    Detail = "Couldn't find artist with this ID",
                    Duration = 4000
                });

            return;
        }

        await OpenUpdateDialog();
    }

    private async Task OpenUpdateDialog()
    {
        await dialogService.OpenAsync("Artist", ds =>
        @<RadzenCard Style="padding: 20px;">
            <div class="container">

                <div class="row mb-4 justify-content-start">
                    <div class="col">
                        <label class="">Id:</label>
                        <RadzenNumeric Min="1000" Max="9999" @bind-Value="_updateArtistModel.ArtistId"></RadzenNumeric>
                    </div>
                    <div class="col mx-2">
                        <label class="">Name:</label>
                        <RadzenTextBox Placeholder="Name" @bind-Value="_updateArtistModel.ArtistName"></RadzenTextBox>
                    </div>
                    <div class="col">
                        <label class="">Age:</label>
                        <RadzenNumeric Min="1" Max="999" @bind-Value="_updateArtistModel.Age"></RadzenNumeric>
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col">
                        <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="_updateArtistModel.ArtistFilms" Multiple="true" Data="@_films"
                            TextProperty="FilmName" ValueProperty="FilmName" 
                            Style="height:200px; width:100%" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenButton Text="Discard" Click="() => ds.Close(false)" Style="margin-bottom: 10px; width: 150px" />
                        <RadzenButton Text="Update" Click="(() => { UpdateArtist(); ds.Close(true); })"
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Style="margin-bottom: 10px; width: 150px" />
                    </div>
                </div>
            </div>

        </RadzenCard>
    );
}

    private void UpdateArtist()
    {
        try
        {
            ArtistRepository.Update(_foundArtistId, _updateArtistModel);
        }
        catch (Exception e)
        {
            this.notificationService.Notify(
                new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Updating Failed",
                    Detail = e.Message,
                    Duration = 4000
                });
        }
    }
 
    private void RemoveArtist(int artistId)
    {
        try
        {
            this.ArtistRepository.RemoveById(artistId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
            this.notificationService.Notify(
                new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Removing Failed",
                    Detail = e.Message,
                    Duration = 4000
                });
        }
    }
}
